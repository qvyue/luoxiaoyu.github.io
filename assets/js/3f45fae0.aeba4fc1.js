"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6800],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=p(n),g=r,d=m["".concat(s,".").concat(g)]||m[g]||u[g]||i;return n?a.createElement(d,l(l({ref:t},c),{},{components:n})):a.createElement(d,l({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5503:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={id:"stream-terminal-operation",sidebar_position:6,sidebar_label:"Stream\u7ec8\u6b62\u64cd\u4f5c"},l="Stream\u7ec8\u6b62\u64cd\u4f5c",o={unversionedId:"java-stream/stream-terminal-operation",id:"java-stream/stream-terminal-operation",title:"Stream\u7ec8\u6b62\u64cd\u4f5c",description:"\u901a\u8fc7\u7ec8\u6b62\u7ba1\u9053\u64cd\u4f5c\u4e4b\u540e\uff0cStream\u6d41\u5c06\u4f1a\u7ed3\u675f\uff0c\u6700\u540e\u53ef\u80fd\u4f1a\u6267\u884c\u67d0\u4e9b\u903b\u8f91\u5904\u7406\uff0c\u6216\u8005\u662f\u6309\u7167\u8981\u6c42\u8fd4\u56de\u67d0\u4e9b\u6267\u884c\u540e\u7684\u7ed3\u679c\u6570\u636e\u3002",source:"@site/docs/java-stream/terminal-operation.md",sourceDirName:"java-stream",slug:"/java-stream/stream-terminal-operation",permalink:"/java-stream/stream-terminal-operation",draft:!1,tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"stream-terminal-operation",sidebar_position:6,sidebar_label:"Stream\u7ec8\u6b62\u64cd\u4f5c"},sidebar:"Java-Stream\u6d41\u6559\u7a0b",previous:{title:"Stream\u4e2d\u95f4\u64cd\u4f5c",permalink:"/java-stream/stream-intermediate-operation"}},s={},p=[{value:"collect \u8fd4\u56de\u96c6\u5408",id:"collect-\u8fd4\u56de\u96c6\u5408",level:2},{value:"toList/toSet\u3001toMap",id:"tolisttosettomap",level:3},{value:"joining \u62fc\u63a5\u6d41\u4e2d\u7684\u5143\u7d20",id:"joining-\u62fc\u63a5\u6d41\u4e2d\u7684\u5143\u7d20",level:3},{value:"groupingBy \u5206\u7ec4",id:"groupingby-\u5206\u7ec4",level:3},{value:"partitioningBy \u5206\u533a",id:"partitioningby-\u5206\u533a",level:3},{value:"allMatch/anyMatch/noneMatch \u5339\u914d\u5143\u7d20",id:"allmatchanymatchnonematch-\u5339\u914d\u5143\u7d20",level:2},{value:"count \u7edf\u8ba1\u6d41\u4e2d\u5143\u7d20\u4e2a\u6570",id:"count-\u7edf\u8ba1\u6d41\u4e2d\u5143\u7d20\u4e2a\u6570",level:2},{value:"min/max \u83b7\u53d6\u6700\u5c0f\u6700\u5927\u503c",id:"minmax-\u83b7\u53d6\u6700\u5c0f\u6700\u5927\u503c",level:2},{value:"findFirst/findAny \u67e5\u627e\u7b2c\u4e00\u4e2a/\u4efb\u610f\u5143\u7d20",id:"findfirstfindany-\u67e5\u627e\u7b2c\u4e00\u4e2a\u4efb\u610f\u5143\u7d20",level:2},{value:"foreach \u904d\u5386",id:"foreach-\u904d\u5386",level:2},{value:"reduce \u5c06\u6d41\u4e2d\u7684\u5143\u7d20\u7ec4\u5408",id:"reduce-\u5c06\u6d41\u4e2d\u7684\u5143\u7d20\u7ec4\u5408",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"stream\u7ec8\u6b62\u64cd\u4f5c"},"Stream\u7ec8\u6b62\u64cd\u4f5c"),(0,r.kt)("p",null,"\u901a\u8fc7\u7ec8\u6b62\u7ba1\u9053\u64cd\u4f5c\u4e4b\u540e\uff0cStream\u6d41\u5c06\u4f1a",(0,r.kt)("strong",{parentName:"p"},"\u7ed3\u675f"),"\uff0c\u6700\u540e\u53ef\u80fd\u4f1a\u6267\u884c\u67d0\u4e9b\u903b\u8f91\u5904\u7406\uff0c\u6216\u8005\u662f\u6309\u7167\u8981\u6c42\u8fd4\u56de\u67d0\u4e9b\u6267\u884c\u540e\u7684\u7ed3\u679c\u6570\u636e\u3002"),(0,r.kt)("h2",{id:"collect-\u8fd4\u56de\u96c6\u5408"},"collect \u8fd4\u56de\u96c6\u5408"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"collect()"),"\u65b9\u6cd5\u4e3a\u6700\u5e38\u7528\u7684Stream\u7ec8\u6b62\u64cd\u4f5c\uff0c\u76ee\u7684\u662f\u8fd4\u56deList\u3001Set\u3001Map\u7b49\u96c6\u5408\u7c7b\u578b\u5bf9\u8c61\uff0c\u8fd8\u80fd\u505a\u4e00\u4e9b\u7ec4\u5408\u64cd\u4f5c\uff1a"),(0,r.kt)("h3",{id:"tolisttosettomap"},"toList/toSet\u3001toMap"),(0,r.kt)("p",null,"\u914d\u5408collect\u65b9\u6cd5\uff0c\u751f\u6210List\u3001Set\u96c6\u5408\u5bf9\u8c61"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void testCollectToListSetMap() {\n        List<String> stringList = Arrays.asList("Hello", "World", "Tutorial", "Lxiaoyu", "Com");\n        List<Integer> toList = stringList.stream().map(String::length).collect(Collectors.toList());\n        System.out.println("toList = " + toList);\n        Set<Integer> toSet = stringList.stream().map(String::length).collect(Collectors.toSet());\n        System.out.println("toSet = " + toSet);\n        // \u6ce8\u610ftoMap\u7684\u7b2c\u4e09\u4e2a\u53c2\u6570\u3010(v1, v2) -> v1\u3011\uff0c\u5982\u679c\u7701\u7565\u7684\u8bdd\u4f1a\u62a5\u9519\uff1amap\u4e2d\u5b58\u5728\u5f62\u540c\u7684key\uff0c\u56e0\u4e3aHello\u548cWorld\u957f\u5ea6\u90fd\u4e3a5\u3002\n        // \u7b2c\u4e09\u4e2a\u53c2\u6570\u7684\u610f\u601d\u662f\u5982\u679c\u4e24\u4e2akey\u7684\u503c\u76f8\u540c\uff0c\u5219\u9009\u62e9\u7b2c\u4e00\u4e2a\n        Map<Integer, String> toMap = stringList.stream()\n                .collect(Collectors.toMap(String::length, String::toLowerCase, (v1, v2) -> v1));\n        System.out.println("toMap = " + toMap);\n}\n')),(0,r.kt)("p",null,"\u53ef\u4ee5\u770b\u5230toList\u662f\u6b63\u5e38\u6309\u5e8f\u663e\u793a\uff0ctoSet\u7ed3\u679c\u4e2d\u7684\u5143\u7d20\u662f\u53bb\u91cd\u800c\u4e14\u4e71\u5e8f\u7684\uff0ctoMap\u8981\u6ce8\u610f\u91cd\u590dkey\u95ee\u9898\uff0c\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"toList = [5, 5, 8, 7, 3]\ntoSet = [3, 5, 7, 8]\ntoMap = {3=com, 5=hello, 7=lxiaoyu, 8=tutorial}\n")),(0,r.kt)("h3",{id:"joining-\u62fc\u63a5\u6d41\u4e2d\u7684\u5143\u7d20"},"joining \u62fc\u63a5\u6d41\u4e2d\u7684\u5143\u7d20"),(0,r.kt)("p",null,"\u5728collect\u65b9\u6cd5\u4e2d\u4f20\u5165joining\u8fdb\u884c\u5143\u7d20\u62fc\u63a5\uff0c\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"String"),"\u81ea\u5e26\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"join()"),"\u65b9\u6cd5\u7b49\u6548\uff0c\u4e0d\u540c\u70b9\u5728\u4e8e\u62fc\u63a5\u5b57\u7b26\u4e32\u4e4b\u524d\uff0cstream\u6d41\u53ef\u4ee5\u505a",(0,r.kt)("strong",{parentName:"p"},"\u590d\u6742\u7684\u64cd\u4f5c\uff0c\u66f4\u52a0\u7075\u6d3b"),"\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void testCollectJoining() {\n        List<String> stringList = Arrays.asList("Tutorial", "Lxiaoyu", "Com");\n        String result = stringList.stream().map(String::toLowerCase)\n                .collect(Collectors.joining("."));\n        System.out.println("\u62fc\u63a5\u6d41\u4e2d\u7684\u5143\u7d20: " + result);\n}\n')),(0,r.kt)("p",null,"\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u62fc\u63a5\u6d41\u4e2d\u7684\u5143\u7d20: tutorial.lxiaoyu.com\n")),(0,r.kt)("h3",{id:"groupingby-\u5206\u7ec4"},"groupingBy \u5206\u7ec4"),(0,r.kt)("p",null,"\u5728collect\u65b9\u6cd5\u4e2d\u4f20\u5165groupingBy\u8fdb\u884c\u5206\u7ec4\uff0c\u5176\u4e2dgroupingBy\u7684\u65b9\u6cd5\u53c2\u6570\u4e3a\u5206\u7c7b\u51fd\u6570\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void testCollectGroupingBy() {\n    List<String> stringList = Arrays.asList("Hello", "World", "Tutorial", "Lxiaoyu", "Com");\n    Map<Integer, List<String>> groupingBy = stringList.stream().collect(Collectors.groupingBy(String::length));\n    System.out.println("groupingBy = " + groupingBy);\n}\n')),(0,r.kt)("p",null,"groupingBy\u5206\u7ec4\u7c7b\u4f3cmysql\u91cc\u9762\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"group by"),"\u8bed\u6cd5\uff0c\u8fd8\u53ef\u4ee5\u901a\u8fc7\u5d4c\u5957\u4f7f\u7528groupingBy\u8fdb\u884c",(0,r.kt)("strong",{parentName:"p"},"\u591a\u7ea7\u5206\u7c7b"),"\u3002\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"toMap = {3=[Com], 5=[Hello, World], 7=[Lxiaoyu], 8=[Tutorial]}\n\n")),(0,r.kt)("h3",{id:"partitioningby-\u5206\u533a"},"partitioningBy \u5206\u533a"),(0,r.kt)("p",null,"\u5206\u533a\u662f\u7279\u6b8a\u7684\u5206\u7ec4\uff0c\u5b83\u5206\u7c7b\u4f9d\u636e\u662ftrue\u548cfalse\uff0c\u6240\u4ee5\u8fd4\u56de\u7684\u7ed3\u679c\u6700\u591a\u53ef\u4ee5\u5206\u4e3a\u4e24\u7ec4\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void testCollectPartitioningBy() {\n    List<Integer> integerList = Arrays.asList(1, 2, 3, 4, 5);\n    Map<Boolean, List<Integer>> result = integerList.stream().collect(partitioningBy(i -> i < 3));\n    System.out.println("partitioningBy: " + result);\n}\n')),(0,r.kt)("p",null,"partitioningBy\u4e00\u822c\u5e94\u7528\u573a\u666f\u662f\u901a\u8fc7\u5224\u65ad\u6761\u4ef6\u5206\u4e3a\u4e24\u7ec4\u76f8\u53cd\u7684\u7ec4\u5408\uff0c\u7136\u540e\u5206\u522b\u83b7\u53d6\u518d\u8fdb\u884c\u4e0b\u4e00\u6b65\u64cd\u4f5c\u3002\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"partitioningBy: {false=[3, 4, 5], true=[1, 2]}\n")),(0,r.kt)("h2",{id:"allmatchanymatchnonematch-\u5339\u914d\u5143\u7d20"},"allMatch/anyMatch/noneMatch \u5339\u914d\u5143\u7d20"),(0,r.kt)("p",null,"\u8fd4\u56de\u4e00\u4e2aboolean\u503c\uff0c\u7c7b\u4f3c\u4e8eisContains()\uff0c\u7528\u4e8e\u5224\u65ad\u662f\u5426\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\uff0c\u5177\u4f53\u5206\u4e3a\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"allMatch \u5339\u914d\u6240\u6709\u5143\u7d20"),(0,r.kt)("li",{parentName:"ul"},"anyMatch \u5339\u914d\u5176\u4e2d\u4e00\u4e2a"),(0,r.kt)("li",{parentName:"ul"},"noneMatch \u5168\u90e8\u4e0d\u5339\u914d")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void testAllAnyNoneMatch() {\n    List<Integer> integerList = Arrays.asList(1, 2, 3, 4, 5, 6);\n    boolean allMatch = integerList.stream().allMatch(i -> i > 3);\n    System.out.println("\u662f\u5426\u5168\u90e8\u5339\u914d\uff1a" + allMatch);\n    boolean anyMatch = integerList.stream().anyMatch(i -> i > 3);        \n    System.out.println("\u662f\u5426\u4efb\u610f\u5339\u914d\uff1a" + anyMatch);\n    boolean noneMatch = integerList.stream().noneMatch(i -> i > 3);\n    System.out.println("\u662f\u5426\u5168\u90e8\u90fd\u4e0d\u5339\u914d\uff1a" + noneMatch);\n}\n')),(0,r.kt)("p",null,"\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"\u662f\u5426\u5168\u90e8\u5339\u914d\uff1afalse\n\u662f\u5426\u4efb\u610f\u5339\u914d\uff1atrue\n\u662f\u5426\u5168\u90e8\u90fd\u4e0d\u5339\u914d\uff1afalse\n")),(0,r.kt)("h2",{id:"count-\u7edf\u8ba1\u6d41\u4e2d\u5143\u7d20\u4e2a\u6570"},"count \u7edf\u8ba1\u6d41\u4e2d\u5143\u7d20\u4e2a\u6570"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void testCount() {\n    List<Integer> integerList = Arrays.asList(1, 2, 3, 4, 5, 6);\n    long count = integerList.stream().count();\n    System.out.println("count=" + count);\n}\n')),(0,r.kt)("p",null,"\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"count=6\n")),(0,r.kt)("h2",{id:"minmax-\u83b7\u53d6\u6700\u5c0f\u6700\u5927\u503c"},"min/max \u83b7\u53d6\u6700\u5c0f\u6700\u5927\u503c"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void testMinMax() {\nList<Integer> integerList = Arrays.asList(6, 2, 3, 4, 1, 5);\n    Integer min = integerList.stream().min(Integer::compareTo).orElse(0);\n    System.out.println("min = " + min);\n    Integer max = integerList.stream().max(Integer::compareTo).orElse(0);\n    System.out.println("max = " + max);\n}\n')),(0,r.kt)("p",null,"\u6574\u6570\u96c6\u5408\u6c42\u6700\u5927\u6700\u5c0f\u503c\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"orElse(0)"),"\u65b9\u6cd5\u8868\u793a\u8bbe\u7f6e\u9ed8\u8ba4\u503c",(0,r.kt)("inlineCode",{parentName:"p"},"0"),"\uff0c\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"min = 1\nmax = 6\n")),(0,r.kt)("h2",{id:"findfirstfindany-\u67e5\u627e\u7b2c\u4e00\u4e2a\u4efb\u610f\u5143\u7d20"},"findFirst/findAny \u67e5\u627e\u7b2c\u4e00\u4e2a/\u4efb\u610f\u5143\u7d20"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"findFirst()"),"\u662f\u67e5\u627e\u96c6\u5408\u4e2d\u7b2c\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"findAny()"),"\u662f\u67e5\u627e\u96c6\u5408\u4e2d\u4efb\u610f\u4e00\u4e2a\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\u3002findFirst/findAny\u548c",(0,r.kt)("inlineCode",{parentName:"p"},"allMatch/anyMatch"),"\u65b9\u6cd5\u7c7b\u4f3c\uff0c\u53ea\u662f\u8fd4\u56de\u503c\u4e0d\u540c\uff0c\u8fd8\u6709findFirst/findAny\u4e0d\u4f20\u53c2\uff0c\u8981\u63d0\u524d\u7b5b\u9009\u7b26\u5408\u6761\u4ef6\u7684\u5143\u7d20\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void testFindFirstFindAny() {\n    List<Integer> integerList = Arrays.asList(1, 2, 3, 4, 5, 6);\n    Integer findFirst = integerList.stream().filter(i -> i > 1).findFirst().orElse(0);\n    System.out.println("findFirst = " + findFirst);\n    Integer findAny = integerList.stream().filter(i -> i > 1).findAny().orElse(0);\n    System.out.println("findAny = " + findAny);\n}\n')),(0,r.kt)("p",null,"\u76f8\u540c\u7b5b\u9009\u6761\u4ef6\u4e0b\uff0c\u8c8c\u4f3cfindFirst\u548cfindAny\u90fd\u4e00\u6837\uff0c\u4f46\u662f\u8fd9\u662f\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"\u666e\u901a\u6d41stream()"),"\u60c5\u51b5\u4e0b\uff0c\u5982\u679c\u5728\u5e76\u884c\u6d41",(0,r.kt)("inlineCode",{parentName:"p"},"parallelStream()"),"\u60c5\u51b5\u4e0b\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"findAny"),"\u7684\u7ed3\u679c\u53ef\u80fd\u6bcf\u6b21\u90fd\u4e0d\u540c\u3002\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"findFirst = 2\nfindAny = 2\n")),(0,r.kt)("h2",{id:"foreach-\u904d\u5386"},"foreach \u904d\u5386"),(0,r.kt)("p",null,"foreach()\u65b9\u6cd5\u7b49\u6548\u4e8eJava\u7684foreach\u5faa\u73af\u65b9\u6cd5\uff0c\u6bd4\u8f83\u5e38\u7528\uff0c\u5728\u524d\u9762\u7684\u6559\u7a0b\u4e2d\u4e5f\u591a\u6b21\u63d0\u5230"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public void testForeach() {\n    List<Integer> integerList = Arrays.asList(1, 2, 3, 4, 5, 6);\n    integerList.stream().foreach(System.out::println);\n}\n")),(0,r.kt)("p",null,"\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"1\n2\n3\n4\n5\n6\n")),(0,r.kt)("h2",{id:"reduce-\u5c06\u6d41\u4e2d\u7684\u5143\u7d20\u7ec4\u5408"},"reduce \u5c06\u6d41\u4e2d\u7684\u5143\u7d20\u7ec4\u5408"),(0,r.kt)("p",null,"reduce() \u65b9\u6cd5\u4e3b\u8981\u7528\u6765\u8fdb\u884c\u7b97\u672f\u8fd0\u7b97"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public void testReduce() {\n    List<Integer> integerList = Arrays.asList(1, 2, 3, 4);\n    Integer reduce = integerList.stream().reduce(0, Integer::sum);\n    System.out.println(reduce);\n}\n")),(0,r.kt)("p",null,"\u4e0a\u9762reduce\u65b9\u6cd5\u662f\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"Integer"),"\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"sum"),"\u65b9\u6cd5\uff08Lambdas\u8868\u8fbe\u5f0f\u5199\u6cd5\uff09\u6c42\u548c\uff0c\u5982\u679c\u7ed3\u679c\u4e0d\u5b58\u5728\u5219\u9ed8\u8ba4\u7ed3\u679c\u4e3a0\uff0c\u6267\u884c\u7ed3\u679c\u5982\u4e0b\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"10\n")))}u.isMDXComponent=!0}}]);